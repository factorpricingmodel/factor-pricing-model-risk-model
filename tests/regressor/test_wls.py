import pytest
from numpy import array
from numpy.testing import assert_almost_equal

from fpm_risk_model.regressor.wls import WLS


@pytest.fixture(scope="module")
def X():
    return array(
        [
            [-0.02678756, -0.03400254, 0.0, 0.000855],
            [-0.00344077, -0.00953307, 0.0, -0.02505943],
            [0.00443915, 0.01752232, 0.0, -0.01956966],
            [-0.04247514, -0.01891826, 0.0, -0.04220453],
            [-0.01051272, -0.00197782, 0.0, 0.00528776],
            [-0.01684373, 0.01758743, 0.0, 0.01619198],
            [0.00658919, 0.02239528, 0.0, 0.01451376],
            [-0.03482585, -0.0452383, 0.0, -0.02571051],
            [0.02034743, 0.01122229, 0.0, 0.02187115],
            [-0.01329412, -0.04414332, 0.0, -0.02401548],
        ]
    )


@pytest.fixture(scope="module")
def y():
    return array(
        [
            [0.06323026, -0.15644581],
            [0.01829957, 0.09617634],
            [-0.06074615, 0.17670851],
            [0.1238173, 0.14189995],
            [-0.03715707, -0.04710242],
            [-0.08798148, -0.03209175],
            [-0.1300186, 0.00469255],
            [0.14264733, -0.05445549],
            [-0.13802269, -0.07709159],
            [0.10593153, -0.05229029],
        ]
    )


def test_wls(X, y):
    regressor = WLS()
    result = regressor.fit(X=X, y=y)
    expected_alpha = array(
        [
            [-0.02086442, -0.00247773],
            [-0.04388078, -0.00521101],
            [-0.04843571, -0.00575193],
            [0.00681982, 0.00080988],
            [-0.03525375, -0.00418651],
            [-0.02324037, -0.00275988],
            [-0.05289947, -0.00628202],
            [-0.01071973, -0.00127301],
            [-0.07423966, -0.00881624],
            [-0.03900638, -0.00463216],
        ]
    )
    expected_beta = array(
        [
            [-0.1476475, 0.4969175],
            [-2.3958355, 3.9949929],
            [0.0, 0.0],
            [-1.5496225, -5.6338743],
        ]
    )

    assert_almost_equal(result.alpha, expected_alpha)
    assert_almost_equal(result.beta, expected_beta)
